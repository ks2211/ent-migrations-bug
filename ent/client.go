// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entgo.io/bug/ent/migrate"

	"entgo.io/bug/ent/groups"
	"entgo.io/bug/ent/tenant"
	"entgo.io/bug/ent/user"
	"entgo.io/bug/ent/userperms"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Groups is the client for interacting with the Groups builders.
	Groups *GroupsClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPerms is the client for interacting with the UserPerms builders.
	UserPerms *UserPermsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Groups = NewGroupsClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPerms = NewUserPermsClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Groups:    NewGroupsClient(cfg),
		Tenant:    NewTenantClient(cfg),
		User:      NewUserClient(cfg),
		UserPerms: NewUserPermsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Groups:    NewGroupsClient(cfg),
		Tenant:    NewTenantClient(cfg),
		User:      NewUserClient(cfg),
		UserPerms: NewUserPermsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Groups.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Groups.Use(hooks...)
	c.Tenant.Use(hooks...)
	c.User.Use(hooks...)
	c.UserPerms.Use(hooks...)
}

// GroupsClient is a client for the Groups schema.
type GroupsClient struct {
	config
}

// NewGroupsClient returns a client for the Groups from the given config.
func NewGroupsClient(c config) *GroupsClient {
	return &GroupsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groups.Hooks(f(g(h())))`.
func (c *GroupsClient) Use(hooks ...Hook) {
	c.hooks.Groups = append(c.hooks.Groups, hooks...)
}

// Create returns a builder for creating a Groups entity.
func (c *GroupsClient) Create() *GroupsCreate {
	mutation := newGroupsMutation(c.config, OpCreate)
	return &GroupsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Groups entities.
func (c *GroupsClient) CreateBulk(builders ...*GroupsCreate) *GroupsCreateBulk {
	return &GroupsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Groups.
func (c *GroupsClient) Update() *GroupsUpdate {
	mutation := newGroupsMutation(c.config, OpUpdate)
	return &GroupsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupsClient) UpdateOne(gr *Groups) *GroupsUpdateOne {
	mutation := newGroupsMutation(c.config, OpUpdateOne, withGroups(gr))
	return &GroupsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupsClient) UpdateOneID(id int) *GroupsUpdateOne {
	mutation := newGroupsMutation(c.config, OpUpdateOne, withGroupsID(id))
	return &GroupsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Groups.
func (c *GroupsClient) Delete() *GroupsDelete {
	mutation := newGroupsMutation(c.config, OpDelete)
	return &GroupsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupsClient) DeleteOne(gr *Groups) *GroupsDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GroupsClient) DeleteOneID(id int) *GroupsDeleteOne {
	builder := c.Delete().Where(groups.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupsDeleteOne{builder}
}

// Query returns a query builder for Groups.
func (c *GroupsClient) Query() *GroupsQuery {
	return &GroupsQuery{
		config: c.config,
	}
}

// Get returns a Groups entity by its id.
func (c *GroupsClient) Get(ctx context.Context, id int) (*Groups, error) {
	return c.Query().Where(groups.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupsClient) GetX(ctx context.Context, id int) *Groups {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Groups.
func (c *GroupsClient) QueryTenant(gr *Groups) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groups.Table, groups.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groups.TenantTable, groups.TenantColumn),
		)
		schemaConfig := gr.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.Groups
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupsClient) Hooks() []Hook {
	return c.hooks.Groups
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Tenant.
func (c *TenantClient) QueryUsers(t *Tenant) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.UsersTable, tenant.UsersColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a Tenant.
func (c *TenantClient) QueryGroups(t *Tenant) *GroupsQuery {
	query := &GroupsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(groups.Table, groups.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.GroupsTable, tenant.GroupsColumn),
		)
		schemaConfig := t.schemaConfig
		step.To.Schema = schemaConfig.Groups
		step.Edge.Schema = schemaConfig.Groups
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a User.
func (c *UserClient) QueryTenant(u *User) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.TenantTable, user.TenantColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Tenant
		step.Edge.Schema = schemaConfig.User
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserPerms queries the user_perms edge of a User.
func (c *UserClient) QueryUserPerms(u *User) *UserPermsQuery {
	query := &UserPermsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userperms.Table, userperms.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserPermsTable, user.UserPermsColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.UserPerms
		step.Edge.Schema = schemaConfig.UserPerms
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserPermsClient is a client for the UserPerms schema.
type UserPermsClient struct {
	config
}

// NewUserPermsClient returns a client for the UserPerms from the given config.
func NewUserPermsClient(c config) *UserPermsClient {
	return &UserPermsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userperms.Hooks(f(g(h())))`.
func (c *UserPermsClient) Use(hooks ...Hook) {
	c.hooks.UserPerms = append(c.hooks.UserPerms, hooks...)
}

// Create returns a builder for creating a UserPerms entity.
func (c *UserPermsClient) Create() *UserPermsCreate {
	mutation := newUserPermsMutation(c.config, OpCreate)
	return &UserPermsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPerms entities.
func (c *UserPermsClient) CreateBulk(builders ...*UserPermsCreate) *UserPermsCreateBulk {
	return &UserPermsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPerms.
func (c *UserPermsClient) Update() *UserPermsUpdate {
	mutation := newUserPermsMutation(c.config, OpUpdate)
	return &UserPermsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPermsClient) UpdateOne(up *UserPerms) *UserPermsUpdateOne {
	mutation := newUserPermsMutation(c.config, OpUpdateOne, withUserPerms(up))
	return &UserPermsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPermsClient) UpdateOneID(id int) *UserPermsUpdateOne {
	mutation := newUserPermsMutation(c.config, OpUpdateOne, withUserPermsID(id))
	return &UserPermsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPerms.
func (c *UserPermsClient) Delete() *UserPermsDelete {
	mutation := newUserPermsMutation(c.config, OpDelete)
	return &UserPermsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPermsClient) DeleteOne(up *UserPerms) *UserPermsDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserPermsClient) DeleteOneID(id int) *UserPermsDeleteOne {
	builder := c.Delete().Where(userperms.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPermsDeleteOne{builder}
}

// Query returns a query builder for UserPerms.
func (c *UserPermsClient) Query() *UserPermsQuery {
	return &UserPermsQuery{
		config: c.config,
	}
}

// Get returns a UserPerms entity by its id.
func (c *UserPermsClient) Get(ctx context.Context, id int) (*UserPerms, error) {
	return c.Query().Where(userperms.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPermsClient) GetX(ctx context.Context, id int) *UserPerms {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPerms.
func (c *UserPermsClient) QueryUser(up *UserPerms) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userperms.Table, userperms.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userperms.UserTable, userperms.UserColumn),
		)
		schemaConfig := up.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserPerms
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPermsClient) Hooks() []Hook {
	return c.hooks.UserPerms
}
