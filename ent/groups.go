// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/groups"
	"entgo.io/bug/ent/tenant"
	"entgo.io/ent/dialect/sql"
)

// Groups is the model entity for the Groups schema.
type Groups struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupsQuery when eager-loading is set.
	Edges GroupsEdges `json:"edges"`
}

// GroupsEdges holds the relations/edges for other nodes in the graph.
type GroupsEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupsEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// The edge tenant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Groups) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case groups.FieldID, groups.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case groups.FieldName, groups.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Groups", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Groups fields.
func (gr *Groups) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groups.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case groups.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gr.Name = value.String
			}
		case groups.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gr.Description = value.String
			}
		case groups.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				gr.TenantID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Groups entity.
func (gr *Groups) QueryTenant() *TenantQuery {
	return (&GroupsClient{config: gr.config}).QueryTenant(gr)
}

// Update returns a builder for updating this Groups.
// Note that you need to call Groups.Unwrap() before calling this method if this Groups
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Groups) Update() *GroupsUpdateOne {
	return (&GroupsClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Groups entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Groups) Unwrap() *Groups {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Groups is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Groups) String() string {
	var builder strings.Builder
	builder.WriteString("Groups(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(gr.Description)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.TenantID))
	builder.WriteByte(')')
	return builder.String()
}

// GroupsSlice is a parsable slice of Groups.
type GroupsSlice []*Groups

func (gr GroupsSlice) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
