// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/user"
	"entgo.io/bug/ent/userperms"
	"entgo.io/ent/dialect/sql"
)

// UserPerms is the model entity for the UserPerms schema.
type UserPerms struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Admin holds the value of the "admin" field.
	Admin bool `json:"admin,omitempty"`
	// License1 holds the value of the "license_1" field.
	License1 bool `json:"license_1,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPermsQuery when eager-loading is set.
	Edges UserPermsEdges `json:"edges"`
}

// UserPermsEdges holds the relations/edges for other nodes in the graph.
type UserPermsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPermsEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPerms) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userperms.FieldAdmin, userperms.FieldLicense1:
			values[i] = new(sql.NullBool)
		case userperms.FieldID, userperms.FieldUserID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserPerms", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPerms fields.
func (up *UserPerms) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userperms.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case userperms.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				up.Admin = value.Bool
			}
		case userperms.FieldLicense1:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field license_1", values[i])
			} else if value.Valid {
				up.License1 = value.Bool
			}
		case userperms.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				up.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserPerms entity.
func (up *UserPerms) QueryUser() *UserQuery {
	return (&UserPermsClient{config: up.config}).QueryUser(up)
}

// Update returns a builder for updating this UserPerms.
// Note that you need to call UserPerms.Unwrap() before calling this method if this UserPerms
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPerms) Update() *UserPermsUpdateOne {
	return (&UserPermsClient{config: up.config}).UpdateOne(up)
}

// Unwrap unwraps the UserPerms entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPerms) Unwrap() *UserPerms {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPerms is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPerms) String() string {
	var builder strings.Builder
	builder.WriteString("UserPerms(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("admin=")
	builder.WriteString(fmt.Sprintf("%v", up.Admin))
	builder.WriteString(", ")
	builder.WriteString("license_1=")
	builder.WriteString(fmt.Sprintf("%v", up.License1))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", up.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserPermsSlice is a parsable slice of UserPerms.
type UserPermsSlice []*UserPerms

func (up UserPermsSlice) config(cfg config) {
	for _i := range up {
		up[_i].config = cfg
	}
}
